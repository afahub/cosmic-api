generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  VENDOR
  ADMIN
}

model User {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  email              String         @unique
  phoneNumber        String?        @unique
  occupation         String?
  country            String?
  socialMediaHandles String[]
  fullName           String?
  name               String
  password           String
  refreshToken       String?
  avatar             String?        @default("https://aui.atlassian.com/aui/9.3/docs/images/avatar-person.svg")
  isUserBan          Boolean        @default(false)
  isUserDeleted      Boolean        @default(false)
  isAdmin            Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  role               Role           @default(CUSTOMER)
  vendorProfile      VendorProfile?
  orders             Order[]
}

model VendorProfile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  isVerified Boolean  @default(false)
  rating     Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @unique @db.ObjectId
}

model Business {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  address       String
  logo          String?
  description   String?
  contactEmail  String
  contactPhone  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  vendorProfile VendorProfile?
  products      Product[]
  inventories   Inventory[]
  discounts     Discount[]
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.ObjectId
  business    Business    @relation(fields: [businessId], references: [id])
  businessId  String      @db.ObjectId
  inventories Inventory[]
  discounts   Discount[]
  orders      OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  products         Product[]
  parentCategory   Category?  @relation("SubCategories", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCategoryId String?    @db.ObjectId
  subCategories    Category[] @relation("SubCategories")
}

model Inventory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity   Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, businessId])
}

model Discount {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  percentage Float
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean  @default(true)
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, businessId])
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  customer    User        @relation(fields: [customerId], references: [id])
  customerId  String      @db.ObjectId
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
  price     Float
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
